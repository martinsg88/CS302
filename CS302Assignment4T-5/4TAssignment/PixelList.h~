#ifndef PIXELLIST_H
#define PIXELLIST_H

#include "NodeType.h"
#include "PixelType.h"


#include <cstdlib>

template <class ItemType>
class PixelList
{

public:
	PixelList();
	void MakeEmpty();
	void RetrieveItem(ItemType&, bool&);
	void InsertItem(ItemType);
	void ResetList();
	int  LengthIs();
	bool IsLastItem();
	void GetNextItem(ItemType&);
	void DeleteItem(ItemType);
	~PixelList();

private:
	NodeType<PixelType>* listData;
	NodeType<ItemType>* currentPos;
	int length;
};
//#include "PixelList.cpp"

//Default Constructor-----------------------------------------------------------
template <class ItemType>
PixelList<ItemType>::PixelList()
{
	listData = NULL;
	length = 0;
}
//------------------------------------------------------------------------------
template <class ItemType>
void PixelList<ItemType>::MakeEmpty()
{
	NodeType<ItemType>* temp;
 
	while(listData != NULL) 
	{
		temp = listData;
		listData = listData->next;
		delete temp;
	}
 length=0;
}
//------------------------------------------------------------------------------
template <class ItemType>
void PixelList<ItemType>::InsertItem(ItemType newitem)
{
	NodeType<ItemType>* location;
	
	location = new NodeType<ItemType>;
	location->info = newitem;
	location->next = listData;
	length++;

}
//------------------------------------------------------------------------------
template <class ItemType>
void PixelList<ItemType>::RetrieveItem(ItemType& item, bool& found)
{
	NodeType<ItemType>* location;

	location = listData;
	found = false;
 
	while( (location != NULL) && !found)
	{

		if(item == location->info)
		{
			found = true;
			item = location->info;
		}
		else
			location = location->next;
	}
}
//------------------------------------------------------------------------------
template <class ItemType>
void PixelList<ItemType>::ResetList()
{
	currentPos = listData;
}
//------------------------------------------------------------------------------
template <class ItemType>
int PixelList<ItemType>::LengthIs()
{
	return length;
}
//------------------------------------------------------------------------------
template <class ItemType>
bool PixelList<ItemType>::IsLastItem()
{
	return (currentPos == NULL);
}
//------------------------------------------------------------------------------
template <class ItemType>
void PixelList<ItemType>::GetNextItem(ItemType& item)
{
	item = currentPos->info;
	currentPos = currentPos->next;
}
//------------------------------------------------------------------------------
template <class ItemType>
void PixelList<ItemType>::DeleteItem(ItemType item)
{
	NodeType<ItemType>* location = listData;
	NodeType<ItemType>* temp;
	
	if(item == listData->info)
	{
		temp = listData;
		listData = listData->next;
	}
	
	else
	{
		while(!(item == (location->next)->info))
			location = location->next;
		
		temp = location->next;
		location->next = temp->next;
	}
	
	delete temp;
	length--;
}
//Destructor--------------------------------------------------------------------
template <class ItemType>
PixelList<ItemType>::~PixelList()
{
	MakeEmpty();
}
#endif
