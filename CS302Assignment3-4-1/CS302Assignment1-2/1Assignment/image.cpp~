//image.cpp

#include <cstdlib>
#include <iostream>
#include <math.h>
#include "image.h"

using namespace std;

//Default Constructor-----------------------------------------------------------
ImageType::ImageType()
{
 cout << "\nEntering Default Constructor..." << endl;
 N = 0;
 M = 0;
 Q = 0;

 pixelValue = NULL;

 cout << " Departing Default Constructor...\n" << endl;
}
//Parameter Constructor---------------------------------------------------------
ImageType::ImageType(int tmpN, int tmpM, int tmpQ)
{
 cout << "\nEntering Parameter Constructor..." << endl;
 N = tmpN;
 M = tmpM;
 Q = tmpQ;

 pixelValue = new int* [N];//create a "single column" of pointers

 for(int i = 0; i < N; i++)
	{
		pixelValue[i] = new int[M];//create row elements for the "col" of pointers
			{
				for(int j = 0; j < M; j++)
					{			
						pixelValue[i][j] = 0;
					}				
			}
	}
 cout << " Departing Parameter Constructor...\n" << endl;
}
//Copy Constructor--------------------------------------------------------------
ImageType::ImageType(const ImageType &object)
{
 cout << "\nEntering Copy Constructor..." << endl;
	N = object.N;
	M = object.M;
	Q = object.Q;

	pixelValue = new int* [N];//allocate a "single column" of pointers

	for(int i = 0; i < N; i++)//for each of the pointers in the new column...
		{
			pixelValue[i] = new int[M];//allocate "a row" of elements
			for(int j = 0; j < M; j++)
				pixelValue[i][j] = object.pixelValue[i][j];
		}
 cout << " Departing Copy Constructor...\n" << endl;
}
//------------------------------------------------------------------------------
void ImageType::getImageInfo(int& rows, int& cols, int& levels)
{
 rows = N;
 cols = M;
 levels = Q;
}
//------------------------------------------------------------------------------
void ImageType::getPixelVal(int i, int j, int& val)
{
 val = pixelValue[i][j];
} 
//------------------------------------------------------------------------------
void ImageType::setImageInfo(int rows, int cols, int levels)
{
 N = rows;
 M = cols;
 Q = levels;
} 
//------------------------------------------------------------------------------
void ImageType::setPixelVal(int i, int j, int val)
{
 pixelValue[i][j] = val;
}
//------------------------------------------------------------------------------
int ImageType::computeAvgGrayLevel(const ImageType &object)
{
	int sum = 0;

	for(int i = 0; i < object.N; i++)
		for(int j = 0; j < object.M; j++)
			sum += object.pixelValue[i][j];

	return (sum/(N*M));
}
//------------------------------------------------------------------------------
ImageType ImageType::enlargeImage(int e, ImageType &object)
{
	int i,j,k; 

	ImageType temp(N, M, Q); //temp to contain all of object just incase
	//temp2 needs to be a factor of (e) larger than the older
	ImageType temp2(N*e, M*e, Q);

	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			temp.pixelValue[i][j]=object.pixelValue[i][j]; //populate temp
		}
	}

	for(i=0; i< N*e; i++)
	{
		for(j=0; j< M*e; j++)
		{	//going through every element of object
			temp2.pixelValue[i][j]=object.pixelValue[i/e][j/e]; 
									    //putting it into temp 2, "i/e" & N*e" 
									    //are walking through and putting it in 
									    //like Prof. Bebis's example
		}		
	}
return (temp2);
}
//------------------------------------------------------------------------------
ImageType ImageType::shrinkImage(int s, ImageType &object)//s is shrink factor
{

//NOTE a lot of this is not needed after, but was put in because object is
//passed by refrence

	int i,j,k;

	ImageType temp(N, M, Q);

	ImageType temp2(N/s, M/s, Q);

	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			temp.pixelValue[i][j]=object.pixelValue[i][j]; //populate temp
		}
	}


	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			object.pixelValue[i][j]=0; // zero out object
		}
	}


	for(i=0; i<N; i+=s)
	{
		for(j=0; j<M; j+=s)
		{	//go through every other of object and populate it from temp	
			object.pixelValue[i/s][j/s]=temp.pixelValue[i][j]; 
		}		
	}


	for(i=0; i<N; i+=s)
	{
		for(j=0; j<M/s; j+=s)
		{		
			object.pixelValue[i/s][j/s]=temp.pixelValue[i][j]; //getting y values
		}	
	}

	for(i = 0; i < (N/s)-1 ; i++)
	{
		for(j = 0; j < (M/s)-1; j++)
		{	// setting it to temp2 to be returned
			temp2.pixelValue[i][j]=object.pixelValue[i][j];
		}
	}
	return(temp2);
}
//------------------------------------------------------------------------------
void ImageType::getSubImage(int ULr,int ULc, int LRr,int LRc, ImageType& object)
{
	ImageType temp(N, M, Q);//declare a temp image object
	int i = 0, j = 0;			//counter variables

	//assign existing image to a temp object
	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			temp.pixelValue[i][j]=object.pixelValue[i][j];
		}
	}

	//reset all existing pixels to 0
	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			object.pixelValue[i][j]=0;
		}
	}

	//copy the original values from the temp object back into the original obj.
	for(i = ULr; i <= LRr ; i++)
	{
		for(j = ULc; j <= LRc; j++)
		{
			object.pixelValue[i][j]=temp.pixelValue[i][j];
		}
	}
}
//------------------------------------------------------------------------------
void ImageType::negateImage(ImageType &object)
{
	for(int i = 0; i < object.N; i++)
		for(int j = 0; j < object.M; j++)
		object.pixelValue[i][j] = abs(255 - object.pixelValue[i][j]);
}
//------------------------------------------------------------------------------
void ImageType::reflectImage(ImageType &object)
{
	int i = 0, j = 0, H = 0, V = 0;
	ImageType temp(N, M, Q);
	char axis;

	//assign existing image to a temp object
	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			temp.pixelValue[i][j]=object.pixelValue[i][j];
		}
	}

	//reset all existing pixels to 0
	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			object.pixelValue[i][j]=0;
		}
	}
	cout << "Would you like to reflect your image (V)ertically (about the ";
	cout << "X-axis) or (H)orizontally (about the Y-axis)?";
	cin >> axis;

	switch(axis)
	{

	case 'H':
	case 'h':

	//reflect temp object about Y axis
	for(i = 0; i < N ; i++)
		{
			for(j = M -1 ; j >= 0; j--)
				{
					object.pixelValue[i][H] = temp.pixelValue[i][j];
					H++;
				}
			H = 0;
		}		

	break;

	case 'V':
	case 'v':

	//reflect temp object about X axis
	for(j = 0; j < M-1 ; j++)
		{
			for(i = N-1 ; i >= 0; i--)
				{
					object.pixelValue[V][j] = temp.pixelValue[i][j];
					V++;
				}
			V = 0;
		}		
	break;
	}
}
//------------------------------------------------------------------------------
ImageType ImageType::translateImage(int t, ImageType &object)
{
	int i,j,k;
	ImageType temp(N, M, Q);

	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			temp.pixelValue[i][j]=object.pixelValue[i][j];
		}
	}

	for(i = 0; i < N; i++)
	{
		for(j = 0; j < M; j++)
		{
			object.getPixelVal(i,j,Q);
		        if((i + t < N) && (j + t < M)) 
			temp.setPixelVal(i + t, j + t, Q);
		}
	}

	return(temp);
}
//------------------------------------------------------------------------------
void ImageType::rotateImage(int N, int M, float theta, ImageType &object)
{
	int R, C;		//new row and column containers
	int Xc, Yc;		//new center coordinates
	
	Xc = static_cast<int>(N/2 + 0.5);//X-coordinate integer center of image
	Yc = static_cast<int>(M/2 + 0.5);//Y-coordinate integer center of image
	
	ImageType temp(N, M, Q);//declare a image type object

	//assign existing image to a temp object
	for(int i = 0; i < N; i++)
	{
		for(int j = 0; j < M; j++)
		{
			temp.pixelValue[i][j]=object.pixelValue[i][j];
		}
	}

	//reset all existing pixels to 0
	for(int i = 0; i < N; i++)
	{
		for(int j = 0; j < M; j++)
		{
			object.pixelValue[i][j] = 0;
		}
	}

	for(int i = 0; i < N; i++)
		for(int j = 0; j < M; j++)
			{	//calculate the row coordinate
				R = Xc + (i - Xc)*static_cast<int>(cos(theta) + 0.5)
						 - (j - Yc)*static_cast<int>(sin(theta) + 0.5);
				//calculate the column coordinate
				C = Yc + (i - Xc)*static_cast<int>(sin(theta) + 0.5)
						 + (j - Yc)*static_cast<int>(cos(theta) + 0.5);

				if(object.inBounds(R, C))//bounds check; out of bounds is black
						object.pixelValue[R = N-1][C = M-1] = 0;
				//otherwise, re-populate the original image using new coordinates
				object.pixelValue[R][C] = temp.pixelValue[i][j];
			}
}
//------------------------------------------------------------------------------
bool ImageType::inBounds(int R, int C)
{
	bool inBounds;	
	//check row and column bounds
	if((R < 0 || R > N - 1) || (C < 0 || C > M - 1))
		{
			return true;
		}
	else
		return false;
}
//Overlaoded = Operator---------------------------------------------------------
void ImageType::operator= (const ImageType &object)
{
	cout << "\nEntering Overloaded = Operator..." << endl;
	
	for(int i = 0; i < N; i++) 	// deallocate the 2D array
		{
			delete [] pixelValue[i];// delete single column array of pointers
		}

	delete [] pixelValue;			// delete double pointer

	N = object.N;
	M = object.M;
	Q = object.Q;

	pixelValue = new int* [N];//allocate a "single column" of pointers

	for(int i = 0; i < N; i++)//for each pointer in the single column...
		{
			pixelValue[i] = new int[M];//allocate "a row" of elements
			for(int j = 0; j < M; j++)
				pixelValue[i][j] = object.pixelValue[i][j];
		}
 cout << " Departing Overloaded = Operator...\n" << endl;
}
//Overlaoded + Operator---------------------------------------------------------
ImageType ImageType::operator + (ImageType &object)
{
 cout << "\nEntering Overloaded + Operator..." << endl;

	ImageType temp(N, M, Q);
	float a = 0;

	cout << "Enter the influence factor (between 0 and 1) your original image ";
	cout << "should have on the second image: " << endl;

	cin >> a;

 for(int i = 0; i < N; i++)
	{
		for(int j = 0; j < M; j++)
		temp.pixelValue[i][j] = (int)(a*pixelValue[i][j]
															+ (1-a)*object.pixelValue[i][j]);
	}
 cout << " Departing Overloaded + Operator...\n" << endl;

 return (temp);
}
//Overlaoded - Operator---------------------------------------------------------
ImageType ImageType::operator - (ImageType &object)
{
	cout << "\nEntering Overloaded - Operator..." << endl;
	ImageType temp(N, M, Q);

	 for(int i = 0; i < N; i++)
		{
		  for(int j = 0; j < M; j++)
		  temp.pixelValue[i][j] = abs(pixelValue[i][j] - object.pixelValue[i][j]);
		}
	cout << "Departing Overloaded - Operator...\n" << endl;
	return (temp);
}
//Destructor-------------------------------------------------------------------
ImageType::~ImageType()
{
 cout << "\nEntering Destructor..." << endl;

	N = M = Q = 0;						// deinitialize N, M & Q

   for(int i = 0; i < N; i++) 	// deallocation the 2D array
		{
			delete [] pixelValue[i];// delete "single column" of pointers
		}

	delete [] pixelValue;			// delete double pointer

 cout << " Departing Destructor...\n" << endl;
}
